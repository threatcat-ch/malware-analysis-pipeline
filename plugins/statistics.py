import json
import os
import time
import logging

from plugins.abstract_plugin import AbstractPlugin
from utils.state import State
from pathlib import Path

class_name = 'Statistics'

class Statistics(AbstractPlugin):
    
    def __init__(self):
        super().__init__()

    def run(self, args):
        logging.info("Run Statistics Plugin")

        sandboxes_to_scan = State.config['sandbox']['sandbox_list']

        # Loop through the sandboxes
        sandboxes = sandboxes_to_scan.split(',')

        # Iterate over the items in the list and process each one
        for sandbox in sandboxes:
            sandbox = sandbox.strip()

            # Create the stats file if it doesn't exist
            stats_file = f"{State.config['stats']['stats_dir']}{sandbox}_stats.json"
            if not Path(stats_file).is_file():
                with open(stats_file, 'w') as f:
                    json.dump({}, f)

            with open(stats_file, "r", encoding='utf-8') as f:
                stats_data = f.read()
            self.data = json.loads(stats_data)
            self.update_stats(stats_file, sandbox)

            # Make a list with daily, monthly and yearly stats
            daily = time.strftime("%Y%m%d")
            monthly = time.strftime("%Y%m")
            yearly = time.strftime("%Y")
            date_list = [daily, monthly, yearly]

            # Iterate over the items in the list and process each one
            for date in date_list:
                date_stats_file = f"{State.config['stats']['stats_dir']}{sandbox}_{date}_stats.json"
                if not Path(date_stats_file).is_file():
                    with open(date_stats_file, 'w') as f:
                        json.dump({}, f)
                with open(date_stats_file, "r", encoding='utf-8') as f:
                    date_stats_data = f.read()
                self.data = json.loads(date_stats_data)
                self.update_stats(date_stats_file, sandbox)

        
    def update_stats(self, stats_file, sandbox):
        signature_file = f"{str(State.path)}/{sandbox}/signature.json"

        # Update the stats file
        if os.path.exists(signature_file):
            with open(signature_file, "r", encoding='utf-8') as f:
                signatures = f.read()
            signatures = json.loads(signatures)
            for signature in signatures:
                logging.info(f"Malware Signature for {sandbox} stats: {signature}")
                self.data[signature] = self.data.get(signature, 0) + 1
            with open(stats_file, 'w') as f:
                json.dump(self.data, f)
        else:
            logging.info('Statistics Plugin found no signature file')
            return