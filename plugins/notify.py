import json
import os
import time
import logging

from plugins.abstract_plugin import AbstractPlugin
from utils.state import State
from pathlib import Path

class_name = 'Statistics'

class Statistics(AbstractPlugin):
    
    def __init__(self):
        super().__init__()

    def run(self, args):
        logging.info("Run Notify Plugin")
        self.todo_path = str(State.path)
        self.sandboxes_to_scan = State.config['sandbox']['sandbox_list']
        self.notify_dir = State.config['notify']['notify_dir']

        # Loop through the sandboxes
        self.sandboxes = self.sandboxes_to_scan.split(',')

        # Iterate over the items in the list and process each one
        for sandbox in self.sandboxes:
            sandbox = sandbox.strip()

            # Create the stats file if it doesn't exist
            stats_file = f"{State.config['stats']['stats_dir']}{sandbox}_stats.json"
            if not Path(stats_file).is_file():
                with open(stats_file, 'w') as f:
                    json.dump({}, f)

            self.send_email(stats_file, sandbox)
        
    def send_email(self, stats_file, sandbox):
        # Send email
        if State.config['notify']['notify_email_list']:
            logging.info("Send email")

            self.mail = ""
            self.mail = self.mail + f"{self.todo_path}\n\n"
            self.mail = self.mail + f"{State.attachment_name}\n\n"
            md5sum = State.calculate_md5(f"{self.todo_path}/{State.attachment_name}")
            sha256sum = State.calculate_sha256(f"{self.todo_path}/{State.attachment_name}")
            self.mail = self.mail + f"{md5sum}\n\n"
            self.mail = self.mail + f"{sha256sum}\n\n"

            for sandbox in self.sandboxes:
                sandbox = sandbox.strip()
                if Path(f"{self.todo_path}/{sandbox}/signature.json").is_file():
                    with open(f"{self.todo_path}/{sandbox}/signature.json", "r", encoding='utf-8') as f:
                        signature_data = f.read()
                    self.signature = json.loads(signature_data)
                    self.mail = self.mail + f"Signature {sandbox}: {json.dumps(self.signature)}\n\n"

                # check if misp_url.json exists
                if Path(f"{self.todo_path}/{sandbox}/misp_url.json").is_file():
                    with open(f"{self.todo_path}/{sandbox}/misp_url.json", "r", encoding='utf-8') as f:
                        misp_url_data = f.read()
                    misp_url = json.loads(misp_url_data)
                    self.mail = self.mail + f"MISP URL {sandbox}: {misp_url['misp_url']}\n\n"

                # check if c2.json exists
                if Path(f"{self.todo_path}/{sandbox}/c2.json").is_file():
                    with open(f"{self.todo_path}/{sandbox}/c2.json", "r", encoding='utf-8') as f:
                        c2_data = f.read()
                    self.c2 = json.loads(c2_data)
                    self.mail = self.mail + f"C2 {sandbox}: {json.dumps(self.c2).replace('.', '[.]')}\n\n"
                else:
                    self.mail = self.mail + f"No C2 found by {sandbox}\n\n"
                    
                if len(self.mail) > 0:
                    notify_email_list = State.config['notify']['notify_email_list'].split(',')
                    for email in notify_email_list:
                        os.system(f"echo '{self.mail}' | mail -s 'Malware Signature for {sandbox}: {State.attachment_name}' {email}")

                    # Check if sha256.json exists in the notify directory
                    if Path(f"{self.notify_dir}/{sha256sum}.json").is_file():
                        # Open the JSON file and read the data
                        with open(f"{self.notify_dir}/{sha256sum}.json", "r", encoding='utf-8') as f:
                            notify_data = f.read()
                            # Parse the JSON and check if email is in the list
                            notify = json.loads(notify_data)
                            if email in notify['notify']:
                                os.system(f"echo '{self.mail}' | mail -s 'Malware Signature for {sandbox}: {State.attachment_name}' {email}")
                                   
                else:
                    logging.info("No mail to send")
        else:
            logging.info("Not sending email")