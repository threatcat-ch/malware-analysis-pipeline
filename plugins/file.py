import argparse
import datetime
import json
import sys
import pathlib
import re
import os
import subprocess
import shutil
import time
import logging


from plugins.abstract_plugin import AbstractPlugin
from utils.state import State
from pathlib import Path

class_name = 'File'

class File(AbstractPlugin):

    def __init__(self):
        super().__init__()
        self.mimetype_list = State.config['mimetype_to_analyze']['mimetype_list'].split(',')
        self.already_analyzed_samples = State.config['collection']['analyzed_samples']
        self.todo_path = ''


    def run(self, args):
        logging.info("Run File Plugin")
        self.todo_path = str(State.path)
        if not State.path:
            logging.info("No path to a file")
            raise Exception("No path to a file")

        # Check if file is in mimetype list
        mime_type_check = False
        for file in os.listdir(State.path):
            if self.check_mimelist(self.todo_path, file):
                State.attachment_name = file
                logging.info(f"Found file to analyze: {file}")
                mime_type_check = True
                if not os.path.isfile(self.already_analyzed_samples):
                    open(self.already_analyzed_samples, 'w')

                with open (self.already_analyzed_samples, 'r') as collection:
                    if os.stat(self.already_analyzed_samples).st_size == 0:
                        data = []
                    else:
                        data = json.load(collection)

                    file_md5 = State.calculate_md5(f"{self.todo_path}/{file}")
                    file_sha1 = State.calculate_sha1(f"{self.todo_path}/{file}")
                    file_sha256 = State.calculate_sha256(f"{self.todo_path}/{file}")
                    file_sha512 = State.calculate_sha512(f"{self.todo_path}/{file}")

                    if any(d['md5'] == file_md5 for d in data):
                        logging.info(f"File already analyzed: {file}")
                        shutil.rmtree(State.path)
                        State.progress_cause = "Already analyzed"
                        raise Exception("Already analyzed")
                        collection.close()
                        return

                    else:
                        logging.info(f"File not analyzed yet: {file}")
                        new_file_entry = {
                                            'md5': file_md5, 
                                            'sha1': file_sha1, 
                                            'sha256': file_sha256, 
                                            'sha512': file_sha512
                                            }
                        State.md5 = file_md5
                        State.sha256 = file_sha256
                        logging.info(f"{State.md5}")
                        logging.info(f"{State.sha256}")
                        data.append(new_file_entry)
                        with open(self.already_analyzed_samples, 'w') as new_collection:
                            json.dump(data, new_collection, indent=4)    
                        collection.close()
                        new_collection.close()
                        return
                return

        if mime_type_check == False:
            logging.info("No file to analyze found")
            raise Exception("No file to analyze found")    

    # Check if file is an executable
    def check_mimelist(self, todo_path, file):
        mime_type_check = subprocess.run(['file', '-b', '--mime-type', todo_path + '/' + file], stdout=subprocess.PIPE)
        for mime_type in self.mimetype_list:
            if mime_type_check.stdout.decode('utf-8').strip() == mime_type:
                logging.info(f"File is in mimetype list: {file}")
                return True
        logging.info(f"File is not in mimetype list: {file}")
        return False
    
