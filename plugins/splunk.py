import json
import os
import time
import logging

from datetime import datetime
from plugins.abstract_plugin import AbstractPlugin
from utils.state import State
from pathlib import Path

class_name = 'Splunk'

class Splunk(AbstractPlugin):
    
    def __init__(self):
        super().__init__()

    def run(self, args):
        logging.info("Run Splunk Plugin")

        sandboxes_to_scan = State.config['sandbox']['sandbox_list']

        self.md5_hash = State.calculate_md5(f"{State.path}/{State.attachment_name}")
        self.sha1_hash = State.calculate_sha1(f"{State.path}/{State.attachment_name}")
        self.sha256_hash = State.calculate_sha256(f"{State.path}/{State.attachment_name}")
        self.sha384_hash = State.calculate_sha384(f"{State.path}/{State.attachment_name}")
        self.sha512_hash = State.calculate_sha512(f"{State.path}/{State.attachment_name}")
        logging.info(f"MD5: {self.md5_hash}")
        logging.info(f"SHA256: {self.sha256_hash}")

        # Create the splunk json file if it doesn't exist
        self.splunk_file = f"{State.config['splunk']['splunk_dir']}{self.sha256_hash}.json"
        if not Path(self.splunk_file).is_file():
            with open(self.splunk_file, 'w') as f:
                json.dump([], f)

        # Loop through the sandboxes
        sandboxes = sandboxes_to_scan.split(',')
        for sandbox in sandboxes:
            sandbox = sandbox.strip()

            with open(self.splunk_file, "r", encoding='utf-8') as f:
                splunk_data = f.read()
            self.data = json.loads(splunk_data)
            self.update_splunk(sandbox)
        
    def update_splunk(self, sandbox):
        now = datetime.now()
        formatted_datetime = now.strftime('%Y-%m-%d %H:%M:%S')
        self.data.append({'first_seen': formatted_datetime})

        self.data.append({'filename': State.attachment_name})
        
        # Read the signature file
        signature_file = f"{str(State.path)}/{sandbox}/signature.json"
        if os.path.exists(signature_file):
            with open(signature_file, "r", encoding='utf-8') as f:
                signatures = f.read()
            signatures = json.loads(signatures)
            #for signature in signatures:
            logging.info(f"Malware Signature for {sandbox} splunk: {signatures}")
            self.data.append({'signatures': signatures})
        
        if os.path.exists(f"{str(State.path)}/{sandbox}/c2.json"):
            with open(f"{str(State.path)}/{sandbox}/c2.json", "r", encoding='utf-8') as f:
                c2 = f.read()
            c2 = json.loads(c2)
            logging.info(f"C2 for {sandbox} splunk: {c2}")
            self.data.append({'c2': [c2]})

        # Insert the hashes into list in the splunk json file
        hash_set = {'hashes': [{'md5': self.md5_hash, 'sha256': self.sha1_hash, 'sha256': self.sha256_hash, 'sha384': self.sha384_hash, 'sha512': self.sha512_hash}]}
        self.data.append(hash_set)

        with open(self.splunk_file, 'w') as f:
                json.dump(self.data, f)
      

