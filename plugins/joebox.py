import argparse
import datetime
import pathlib
import re
import sys
import json
import os
import time
import subprocess
import requests
import logging

from plugins.abstract_plugin import AbstractPlugin
from utils.state import State
from pathlib import Path

class_name = 'Joebox'

class Joebox(AbstractPlugin):
    
    def __init__(self):
        super().__init__()
        self.data = None
        self.joebox_path = ''
        self.joebox_url = State.config['joebox']['url']
        self.joebox_apikey = State.config['joebox']['api_key']
        self.type_map = {
                        'domain': 'domain',
                        'hostname': 'hostname',
                        'dst': 'ip-dst|port',
                        'dumped_file': 'filename',
                        'family': 'tag',
                        'md5': 'md5',
                        'sha1': 'sha1',
                        'sha256': 'sha256',
                        'sha512': 'sha512',
                        'target': 'email-attachment',
                        'url': 'url',
                        'tls_ja3': 'ja3-fingerprint-md5',
                        'user-agent': 'user-agent',
                        'username' : 'email-dst',
                        'email_to' : 'email-dst'
                        }

    # Run Joebox 
    def run(self, args):
        logging.info("Run Joebox Plugin")
        todo_path = str(State.path)
        if todo_path:
            # create directory for joebox output
            if not os.path.exists(f"{todo_path}/joebox"):
                os.makedirs(f"{todo_path}/joebox")
            self.joebox_path = f"{todo_path}/joebox/"

        else:
            logging.info("No Joebox Sample")
            return

        file = State.attachment_name
        self.run_joebox(todo_path, file)

        joebox_report = f"{self.joebox_path}joebox_report.json"
        if os.path.exists(joebox_report):
            with open(joebox_report, "r", encoding='utf-8') as f:
                joebox_report_data = f.read()

            data = json.loads(joebox_report_data)
            self.data = data['analysis']
            self.get_signature_info()
            self.get_c2_info()

            # If c2.json exists log it
            if os.path.exists(f"{self.joebox_path}c2.json"):
                with open(f"{self.joebox_path}c2.json", 'r') as f:
                    c2_data = json.load(f)
                logging.info(f"C2 Data Joebox: {c2_data}")
            
            # If signature.json exists log it
            if os.path.exists(f"{self.joebox_path}signature.json"):
                with open(f"{self.joebox_path}signature.json", 'r') as f:
                    signature_data = json.load(f)
                logging.info(f"Malware Signature Joebox: {signature_data}")

        else:
            logging.info("No Joebox Report")
            return
    
    # Check if file is executable
    def check_executable(self, todo_path, file):
        mime_type_executable = subprocess.run(['file', '--mime-type', todo_path + '/' + file], stdout=subprocess.PIPE)
        if 'application/x-dosexec' in mime_type_executable.stdout.decode('utf-8'):
            return True
        return False
    
    # Set Headers for Joebox
    def headers_type(self, webid, type):
        headers = {
                  'apikey': self.joebox_apikey, 
                  'webid': webid,
                  'type': type
                  }
        return headers

    # Upload file to Joebox and get report/dump/pcap
    def run_joebox(self, todo_path, file):
     
        # Upload file to Joebox
        url = State.config['joebox']['url']
        apikey = State.config['joebox']['api_key']

        headers = {
                  'apikey': apikey, 
                  'accept-tac': 1
                  }

        files = {
                'sample': open(f"{todo_path}/{file}", 'rb')
                }
        submission_id = requests.post(f"{url}submission/new", data=headers, files=files)
        submission_id = submission_id.json()
        submission_id = submission_id['data']['submission_id']
        logging.info(f"Joebox Submission ID: {submission_id}")

        headers = {
                  'apikey': apikey, 
                  'submission_id': submission_id
                  }

        # Check if Joebox is done
        time.sleep(300)
        response = requests.post(f"{url}submission/info", data=headers)
        check_status = response.json()
        logging.info(f"Joebox Status: {check_status['data']['status']}")

        while check_status['data']['status'] != "finished":
            time.sleep(60)
            response = requests.post(f"{url}submission/info", data=headers)
            check_status = response.json()
            logging.info(f"Joebox Status: {check_status['data']['status']}")

        webid = check_status['data']['most_relevant_analysis']['webid']
        logging.info(f"Joebox Web ID:  {webid}")

        # Get Joebox JSON report
        headers = self.headers_type(webid, 'json')
        report_joebox = requests.post(f"{url}analysis/download", data=headers)
        save_report = open(f"{self.joebox_path}joebox_report.json", 'w')
        save_report.write(report_joebox.text)
        save_report.close()
        
        # Get Joebox PCAP
        headers = self.headers_type(webid, 'pcap')
        pcap_joebox = requests.post(f"{url}analysis/download", data=headers)
        save_pcap = open(f"{self.joebox_path}suricata.pcap", 'wb')
        save_pcap.write(pcap_joebox.content)
        save_pcap.close()

        # Get Joebox Memory Dump
        headers = self.headers_type(webid, 'memdumps')
        memdumps_joebox = requests.post(f"{url}analysis/download", data=headers)
        save_memdumps = open(f"{self.joebox_path}memdumps.zip", 'wb')
        save_memdumps.write(memdumps_joebox.content)
        save_memdumps.close()

        # Get Joebox Files
        headers = self.headers_type(webid, 'bins')
        files_joebox = requests.post(f"{url}analysis/download", data=headers)
        save_files = open(f"{self.joebox_path}files.zip", 'wb')
        save_files.write(files_joebox.content)
        save_files.close()

        if not os.path.exists(f"{self.joebox_path}files"):
            os.makedirs(f"{self.joebox_path}files")
        if not os.path.exists(f"{self.joebox_path}memory"):
            os.makedirs(f"{self.joebox_path}memory")

        # Unzip Joebox Files/Memdumps
        try:
            subprocess.run(['7z', 'x', self.joebox_path + '/memdumps.zip', '-o' + self.joebox_path + '/memory/'], stdout=subprocess.PIPE)
        except Exception as e:
            logging.error(f"Error unzipping memdumps.zip: {e}")

        try:       
            subprocess.run(['7z', 'x', '-pinfected', self.joebox_path + '/files.zip', '-o' + self.joebox_path + '/files/'], stdout=subprocess.PIPE)
        except Exception as e:
            logging.error(f"Error unzipping files.zip: {e}")

    # Add C2 info to JSON file
    def add_attr(self, field, field_val):

        if not field_val:
            return
        misp_type = self.type_map.get(field)
        # Add attribute to C2 JSON file
        c2_file_name = f"{self.joebox_path}c2.json"
        if os.path.exists(c2_file_name):
            with open(c2_file_name, "r", encoding='utf-8') as f:
                c2_data = json.load(f)
        else:
            c2_data = {}

        if misp_type == 'domain' and field_val.count('.') > 1:
            misp_type = 'hostname'

        with open(c2_file_name, "w", encoding='utf-8') as f:

            if not c2_data:
                c2_data = {misp_type: field_val}
            else:
                c2_data.update({misp_type: field_val})
            json.dump(c2_data, f)

    # Write signature to JSON file
    def add_signature(self, field, field_val):
        signature_file_name = f"{self.joebox_path}signature.json"

        if os.path.exists(signature_file_name):
            with open(signature_file_name, "r") as f:
                signature_data = json.load(f)
        else:
            signature_data = []

        # open signature json file
        with open(signature_file_name, "w") as f:
            misp_type = self.type_map.get(field)
            if misp_type == 'tag':
                tag = self.search_tag(field_val)
                
                if tag:
                    # add tag to list
                    signature_data.append(tag.strip())
                    json.dump(signature_data, f)
                else:
                    json.dump(signature_data, f)

    # Get MISP Tags
    def search_tag(self, tag):
        # Ignore the misp-galaxy tags
        available_tags = filter(lambda x: not x.startswith('misp-'), State.tags)
        for misp_tag in available_tags:
            if tag.lower() in misp_tag.lower():
                return misp_tag

    
    def make_list(self, data):
        if isinstance(data, list):
            return data
        return [data]

    # Get Malware Signature from Joebox JSON report
    def get_signature_info(self):
        logging.info("Get Malware Signature from Joebox JSON report")
        sig_detections = self.data.get('signaturedetections')

        if not sig_detections:
            return
        strategy = sig_detections.get('strategy', [])

        for strat in self.make_list(strategy):
            logging.info(f"threatname: {strat.get('threatname')}")
            threatname = strat.get('threatname')

            if threatname:
                # split by , and the loop through the list
                for name in threatname.split(','):                
                    logging.info(f"Family: {name.strip()}")
                    self.add_signature('family', name.strip())

    # Get C2 info from Joebox JSON report
    def get_c2_info(self):
            mal_config = self.data.get('malwareconfigs')
            if not mal_config:
                return

            configs = mal_config.get('config', [])
            for config in self.make_list(configs):

                for key, val in config.items():
                    if key == '@threatname':
                        continue
                    
                    cfg = json.loads(val)
                    c2_url = cfg.get('C2 url')
                    if c2_url:
                        self.add_attr('url', c2_url)
            
                    c2_list = cfg.get('C2 list') 
                    if c2_list:
                        for url in c2_list:
                            self.add_attr("url", url)
                    mail_from = cfg.get('Username')
                    if mail_from:
                        self.add_attr('username', mail_from)
                    
                    mail_server = cfg.get('Host')
                    if mail_server:
                        self.add_attr('hostname', mail_server)

                    for key, value in cfg.items():
                        if key in ['C2 url', 'C2 list', 'From: '] or not value:
                            continue
                            


        