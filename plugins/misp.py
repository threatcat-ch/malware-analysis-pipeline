import os
import json
import subprocess
import time
import logging
import warnings

from plugins.abstract_plugin import AbstractPlugin
from utils.state import State
from pathlib import Path
from pymisp import ExpandedPyMISP, MISPEvent, MISPAttribute
from datetime import datetime

class_name = 'MISP'

class MISP(AbstractPlugin):
    def __init__(self):
        super().__init__()
        self.data = {}
        self.misp_distribution_id = 1 # This community only
        self.misp_threat_level_id = 3 # Low
        self.misp_analysis = 2 # Completed
        self.count_signatures = 0
        self.count_c2 = 0
        self.mail = []

    def fxn(self):
        warnings.warn("deprecated", DeprecationWarning)

    def run(self, args):
        logging.info("Run MISP Plugin")

        self.todo_path = str(State.path)
        sandboxes_to_scan = State.config['sandbox']['sandbox_list']

        # Loop through the sandboxes
        sandboxes = sandboxes_to_scan.split(',')

        # Iterate over the items in the list and process each one
        for sandbox in sandboxes:
            sandbox = sandbox.strip()
            self.check_signature_and_c2(sandbox)
            if self.count_signatures > 0 and self.count_c2 > 0:
                logging.info(f"Create MISP Event for {sandbox}")
                self.create_misp_event(sandbox, self.signatures, self.c2, self.mail)
                break
            else:
                return
        
    
    def check_signature_and_c2(self, sandbox):
        if os.path.exists(f"{self.todo_path}/{sandbox}/signature.json") and \
           os.path.exists(f"{self.todo_path}/{sandbox}/c2.json"):

            # Read the signature.json file
            with open(f"{self.todo_path}/{sandbox}/signature.json", "r", encoding='utf-8') as f:
                signatures = f.read()
            self.signatures = json.loads(signatures)
            if self.signatures:
                self.count_signatures = self.count_signatures + 1

            # Read the c2.json file
            with open(f"{self.todo_path}/{sandbox}/c2.json", "r", encoding='utf-8') as f:
                c2 = f.read()
            self.c2 = json.loads(c2)
            if self.c2:
                self.count_c2 = self.count_c2 + 1

            if os.path.exists(f"{self.todo_path}/mail.json"):
            # Read the mail.json file
                with open(f"{self.todo_path}/mail.json", "r", encoding='utf-8') as f:
                    mail = f.read()
                self.mail = json.loads(mail)


    def create_misp_event(self, sandbox, signatures, c2, mail):
        # Create the MISP event
        misp = State.misp
        event = MISPEvent()

        signature_slash = '/'.join(signatures)
        if mail:
            if mail.get('email-subject'):
                event.info = f"{signature_slash} Spam Run ({datetime.now().strftime('%Y-%m-%d')} - {mail['email-subject']})"
            else:
                event.info = f"{signature_slash} Spam Run ({datetime.now().strftime('%Y-%m-%d')} - Empty Subject)"
        event.distribution = self.misp_distribution_id
        event.threat_level_id = self.misp_threat_level_id
        event.analysis = self.misp_analysis
        event.add_tag('tlp:green')

        # Add the signatures as tags
        for signature in signatures:
            if signature == signatures[0]:
                event.add_tag(signature)
    
        misp.add_event(event)

        # Add the attributes
        attributes = []
        if mail:
            for type, value in mail.items():
                a = MISPAttribute()
                a.category = 'Payload delivery'
                a.type = type
                a.value = value
                a.to_ids = False
                attributes.append(a)
        
        for type, value in c2.items():
            a = MISPAttribute()
            a.category = 'Network activity'
            a.type = type
            a.value = value
            # if signature is AgentTesla and type is hostname then do not add the IDS flag
            if 'AgentTesla' in signatures and type == 'hostname':
                a.to_ids = False
            else:
                a.to_ids = True
            a.comment = 'C&C'
            attributes.append(a)
        
        misp.add_attribute(event, attributes)
        
        logging.getLogger().setLevel(logging.INFO)
        
        # Upload malware samples
        for file in os.listdir(self.todo_path):
            file_path = f"{self.todo_path}/{file}"
            logging.info(f"File: {file_path}")
            mime_type_executable = subprocess.run(['file', '--mime-type', file_path], stdout=subprocess.PIPE)
            if 'application/x-dosexec' in mime_type_executable.stdout.decode('utf-8'):
                a = MISPAttribute()
                a.category = 'Payload delivery'
                a.type = 'malware-sample'
                a.value = file
                a.data = Path(file_path)
                a.expand = 'binary'
                a.to_ids = True
                a.comment = 'Attachment'
                event.attributes.append(a)
        try:
            event.run_expansions()
        except Exception as e:
            logging.info(f"Error running expansions: {e}")
            pass
        misp.update_event(event)
        logging.getLogger().setLevel(logging.INFO)
        logging.info(f"MISP Event created - UUID: {event['uuid']}")

        # Write MISP URL to file
        with open(f"{self.todo_path}/{sandbox}/misp_url.json", 'w') as f:
            json.dump({'misp_url': f"{State.config['misp']['url']}/events/view/{event['uuid']}"}, f)

        # Publish the event
        if 'AgentTesla' in signatures:
            misp.publish(event)
            logging.info(f"MISP Event Published - UUID: {event['uuid']}")
        time.sleep(5)